Memo_Name = "CSS-생활백서"

# 등장배경 
	HTML 즉, 웹의 폭발적인 인기로 정보를 잘 표현하는 것도 중요해짐.
	이에따라 디자인의 기능을 전담하는 언어가 필요해짐

# HTML에 CSS 결합법

<style> </style> : style 안에 HTML 태그를 넣어 해당 부분을 디자인

<head>
	<style> h2{color:blue}</style>		// style에 표현 (<style>제외 전부 css 표현)
</head>
<body>
<h1 style="color:red">~~~</h1>	// html 속성 이용 표현 ("color:red" 가 css 표현
<h2>~~~</h2>
</body>

&주의사항 : style에 하나만 쓸경우 ; 가 필요 없으나 그 외에는 ; 가 필요하다.

# CSS 문법

h2 : Selector (선택자)
{~~~} : Declaration (선언)
color : Property (속성)
: : Value-Property Separator (값-속성 구분자)
red : Value (값)
; : Declaration Separator (선언 구분자)


# 선택자 분류

1. 태그 선택자 (모든 태그 선택)
	-Tag{~}
2. id 선택자
	-#Id{~}	(Id는 HTML에서 속성값이나 CSS에서는 속성값 태그라 한다)
3.클래스 선택자
	-.Class{~} (class는 복수로 쓰이는 Id라 생각하면 됨. {id는 유니크 해야함})

& ul,ol{~} 로 쓰면 ul, ol 둘 다 말하는 거임.

# 선택자( 부모자식)

일반적으로 li 시 모든 li 이지만
ul li 일 경우 ul 을 부모로 둔 li 를 말한다.
자식은 부모의 기능을 상속받는다. (상속되는지 안되는지는 속성에 따라 다르다)


Id>li 일 경우는 Id 의 직계인 li 만을 말한다. (하위 까지 적용 x / color 예외)

# 선택자 (가상클래스)

	a:active{~}	(active 는 누른 상태)
	a:hover{~}	(hover 는 올린 상태)
	a:visited{~}	(visited 는 방문한 상태)
	a:link{~}		(link 는 방문 안한 상태
	a:focus		(focus 는 Tab키로 선택하여 focus된 상태)

# 다양한 선택자

			: 태그
	#		: Id
	.		: 클래스
	*		: 모든
	A+B		: 모든 A 다음의 형제 B 하나를 얻는다
	A~B		: 모든 A 다음의 형제 B 모두를 얻는다
	A>B		: A 바로 밑 B 엘리먼트
	A:first-child	: A 중 첫 번째 엘리먼트
	A:only-child 	: A 중 형제가 없는 엘리먼트  
	A:last-child	: A 중 형제들 중 가장 마지막 엘리먼트
	A:nth-child(Bn) 	: A 중 형제들중에서 Bn 수학식 번째 엘리먼트
	A:nth-last-child(B) 	: A 중 형제들중에서 뒤에서 B 번째 자식 
	A:first-of-type 	: A 형제들 중에서 첫 번째 (깊이 마다)
	A:nth-of-type(Bn+C) : A 형제들 중에서 Bn+C 수학 식 번째 (깊이 마다)
	A:only-of-type 	:  형제 중 A가 자기자신뿐이면 (깊이 마다)
	A:empty		: A 중 자식없으면
	A:not(~)		: A 중 ~가 아닌 애들
	A[attribute]	: A 중 [attribute]를 지닌 애들
		- [attribute] (anyting)
		- [attribute = "value"]
		- [attribute ^= "value "] (시작 값을 포함하는 모두 > "value_smith") 
		- [attribute $= "value"] (끝 값을 포함하는 모두 > "smith_value")
		- [attribtue *= "value"] (값을 포함하는 모두 > "smith_value_smith")

&선택자 공부 게임 사이트 flukeout.github.io
   css cheatsheet selector 사용하면 좋음

# CSS 속성들

color:red : 빨간글자
text-decoration:underline : 밑줄
text-decoration:line-through : 가운데줄
border:1px solid red : 경계선 1px 선 색 red
background-color: powderblue : 배경색은 파우더블루

font-size : 
	^상식^ px 은 고정적인 크기, em 과 rem 은 상대적인 크기, 오늘날에는 rem이 좋음

color :
	^상식^ 
		1. color_name 입력 > color:red , color:tomato
		2. 16진수		> color:#FF006
		3. (r,g,b)		> color:rgb(255,0,0)

text-align
	^상식^	right, center, left 정렬  justify 최대한 줄 꽉채우기 정렬

font-family
	^상식^	컴퓨터 내에 깔려있는 폰트 만 사용됨
		arial 없을 경우 arial, verdana 에서 arial 뒤에 폰트한테로 순서 넘어감
		마지막 폰트 지정 {sans-serif, serif, monospace} 이 3 폰트는 특정 조건인 			모든 폰트를 나타내는거임

font-wight
	^상식^	글자 두께랑 관련 / bold 등 이 있음

line-height
	^상식^	줄 간격 (행간)

font
	^상식^	font-style font-variant font-weight font-size/line-height font-family 

display : inline/block 설정 가능
	-inline : 전체
	-block : 부분
	-flex : 정렬
	-grid : 최신 정렬

border:~px solid ~; : 경계선 생성

padding:~px; : 글자와 경계 간의 간격

margin:~px; : 본문 간의 간격
	-margine : 전체
	-margine-top : 윗 부분
	-~-[bottom, right, left]

width:~px; : 경계 폭 (border 값 미포함)

height:~px; : 높이 (border 값 미포함)

left:~px; : 위치 (offset 값)

position : 상대적, 절대적 위치
	-relative : 기본 값 기준 (offset 값 적용)
	-static : 기본 값 (offset 미적용)
	-absolute : 기본 값은 부모 값, offset은 html 기준 (offset 값 적용)
		  부모로부터 크기 값을 못받음
		   조상 position이 static이 아니면 offset은 조상 위치 기준
	-fixed : 보이는 화면에 고정  
		absolute 처럼 부모로부터 크기 값 못받음

box-sizing:~; : content-box (기본값)/border-box (border값 포함) 으로 바꿀수 있음.

order:~; : 배치 순서

float : 자기 공간만큼만 차지 남는건 양보
	-left : 왼쪽에 배치
	-right

clear : float 효과 무시
	-both : 양쪽다
	-left : 왼쪽만 무시
	-right 

background-color : 배경색

background-image: url(); : 배경이미지

background-repeat		- no-repeat
			- repeat		: 기본값
			- repeat-x		: x축만 반복
			- repeat-y

background-attachment	- fixed

background-size 		- cover	: 화면전체에 이미지 넣음. ( 이미지 짤릴 수 있음)
			- contein	: 화면전체에 이미지 넣음 ( 여백 생길 수 있음)

background-position 	: 그림 위치

filter	: 나중에 알아서 (사진 필터임)

blend	: 나중에 알아서 (색 섞기)

transform : 나중에 알아서 (라이브러리 쓰는게 마음편한다 > magicanimation)

grid-template-column: ~px ~fr	; : fr은 분수비율값



@웹폰트 : 용량이 제일 큰 단점 (국문은 용량이 특히 많음)

# 캐스캐이딩

@ 우선순위 : 웹브라우저 < 사용자 < 저자

@ 중복 우선순위 : sytle attribute > id selector > class selector > tag selector (구체적,명시적 기준)

!important : 우선권을 가짐

# inline 과 block

	inline : 전체	(<h> 태그)

	block level : 부분	(<a> 태그)

# margine 겹침 현상

	두 개의 margine이 겹칠 때 더 큰 값의 margine 값이 적용된다.
	(위 태그와 아래 태그 사이의 영역이 margine 겹침 현상 발생장소다.)
	
	부모에게 시각적 요소가 없으면 부모자식간에 margine 값 겹침 발생

	시각적 요소가 없으면 가장 큰 값을 가진 방향을 margine 값으로 한다.

# flex

	최소 2의 깊이가 필요

display:flex

flex-direction	- row
		- row-reverse
		- column
		- column-reverse

flex-basis:~px;  : 기본크기 flex방향에 따라 모양 다름

flex-grow:~; : n등분 해서 여백 다채우기(0은 변화없음)
flex-shrink:~; : 창 크기 변경에 따라 줄어들기 (0하면 안줄어듬) > 둘 다 비율임

# holy grail Layout

	최적화된 레이아웃 양식

# mediaquery

	화면 크기에 따른 조건부 발동

@media (max-width:~px){
	body{~} }

# transition 사용법

	전환을 자연스럽게 해줌

	selector{
		transition-property :		- all : 전부
					- 원하는 변화 : 해당 변화가 발생하면
		transition-duration: ~s; : 지속시간

		transition:property duration, property duration , ...
		}

# link 사용법

<link rel="stylesheet" href="style.css" > sytle.css 파일을 stylesheet로 적용해라

# import 사용법

<style>
	@import url("url주소")
</style>

# fontello

	문자를 그림으로 (벡터그림) 쉽게 된 폰트
	fontello가 주소
	문자는 &#65 등이라 fontello 받은 후 0x1313 16진수에서 0을 &#로 바꿔주면 된다.
	<i class="fontell_icon_name"> 으로 쓰면 font-family 안써도댐
	

# grid
	
	: flex를 뛰어넘는 최신 방법

display:grid

grid-template-column: ~px ~fr	; : fr은 분수비율값

# caniuse.com	: 최신기술 사용해도 될지 안될지 여부 파악가능한 통계사이트